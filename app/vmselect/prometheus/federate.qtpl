{% import (
	"math"
	"unsafe"

	"github.com/VictoriaMetrics/VictoriaMetrics/app/vmselect/netstorage"
	"github.com/VictoriaMetrics/VictoriaMetrics/lib/storage"
) %}

{% stripspace %}

// Federate writes rs in /federate format.
// See https://prometheus.io/docs/prometheus/latest/federation/
{% func Federate(rs *netstorage.Result, escapingScheme EscapingScheme) %}
	{% code
		values := rs.Values
		timestamps := rs.Timestamps
	%}
	{% if len(timestamps) == 0 || len(values) == 0 %}{% return %}{% endif %}
	{% code
		lastValue := values[len(values)-1]
	%}
	{% if math.IsNaN(lastValue) %}
		{% comment %}
			This is most likely a staleness marker.
			Return nothing after the staleness marker.
			See https://github.com/VictoriaMetrics/VictoriaMetrics/issues/3185
		{% endcomment %}
		{% return %}
	{% endif %}
	{%= prometheusFederateMetricName(&rs.MetricName, escapingScheme) %}{% space %}
	{%f= lastValue %}{% space %}
	{%dl= timestamps[len(timestamps)-1] %}{% newline %}
{% endfunc %}

{% func prometheusFederateMetricName(mn *storage.MetricName, escapingScheme EscapingScheme)  %}
    {% if escapingScheme == NoEscaping %}
        {% if len(mn.Tags) > 0 %}
            {
                {% code tags := mn.Tags %}
                {%= escapePrometheusKey(mn.MetricGroup, escapingScheme) %}
                {%s= fillTags(tags, escapingScheme) %}
            }
	    {% endif %}
    {% else %}
        {%= escapePrometheusKey(mn.MetricGroup, escapingScheme) %}
        {% if len(mn.Tags) > 0 %}
            {
                {% code tags := mn.Tags %}
                {%= escapePrometheusKey(tags[0].Key, escapingScheme) %}={%= escapePrometheusLabel(tags[0].Value) %}
                {%s= fillTags(tags[1:], escapingScheme) %}
            }
        {% endif %}
    {% endif %}
{% endfunc %}

{% func escapePrometheusKey(name []byte, escapingScheme EscapingScheme) %}
    {% code str := unsafe.String(unsafe.SliceData(name), len(name)) %}
    {% code escapedStr := EscapeName(str, escapingScheme) %}
    {% if !IsValidLegacyMetricName(escapedStr) %}
        "{%s= escapedStr %}"
    {% else %}
        {%s= escapedStr %}
    {% endif %}
{% endfunc %}

{% func fillTags(tags []storage.Tag, escapingScheme EscapingScheme) %}
    {% for i := range tags %}
        {% code tag := &tags[i] %}
        ,{%= escapePrometheusKey(tag.Key, escapingScheme) %}={%= escapePrometheusLabel(tag.Value) %}
    {% endfor %}
{% endfunc %}

{% endstripspace %}
