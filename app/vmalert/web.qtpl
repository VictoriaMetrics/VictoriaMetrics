{% package main %}

{% import (
    "time"
    "sort"
    "net/http"

    "github.com/VictoriaMetrics/VictoriaMetrics/app/vmalert/tpl"
    "github.com/VictoriaMetrics/VictoriaMetrics/app/vmalert/vmalertutil"
    "github.com/VictoriaMetrics/VictoriaMetrics/app/vmalert/notifier"
) %}

{% func Controls(icons, filters map[string]string, currentText string, search bool) %}
    <div class="btn-toolbar mb-3" role="toolbar">
        <div class="d-flex gap-2 justify-content-between w-100">
            <div class="d-flex gap-2">
                {% if len(filters) > 0 %}
                    <div class="dropdown">
                        <button
                            class="btn btn-outline-dark dropdown-toggle d-flex justify-content-between align-items-center"
                            type="button"
                            data-bs-toggle="dropdown"
                            aria-expanded="false"
                        >
                            <span class="d-none d-md-inline-block">Filter by status</span>
                            <svg class="d-md-none" height="22" width="22" viewBox="-10 -10 320 310"><path d="M288.953 0h-277c-5.522 0-10 4.478-10 10v49.531c0 5.522 4.478 10 10 10h12.372l91.378 107.397v113.978a10 10 0 0 0 15.547 8.32l49.5-33a10 10 0 0 0 4.453-8.32v-80.978l91.378-107.397h12.372c5.522 0 10-4.478 10-10V10c0-5.522-4.477-10-10-10M167.587 166.77a10 10 0 0 0-2.384 6.48v79.305l-29.5 19.666V173.25a10 10 0 0 0-2.384-6.48L50.585 69.531h199.736zM278.953 49.531h-257V20h257z"/></svg>
                        </button>
                        <ul class="dropdown-menu">
                            {% for key, title := range filters %}
                                <li>
                                    <a class="dropdown-item{% if title == currentText %} active{% endif %}" onclick="groupFilter('{%s key %}')">
                                        <span class="d-none d-md-inline-block">{%s title %}</span>
                                        {%s= icons[key] %}
                                    </a>
                                </li>
                            {% endfor %}
                        </ul>
                    </div>
                {% endif %}
                <a class="btn btn-outline-dark d-flex align-items-center" role="button" onclick="actionAll(true)">
                    <span class="d-none d-md-block">Collapse All</span>
                    <svg class="d-md-none" height="20" width="20" viewBox="3 2 42 44">
                        <path d="M22.6,15.4a1.9,1.9,0,0,0,2.8,0l6-5.9a2.1,2.1,0,0,0,.2-2.7,1.9,1.9,0,0,0-3-.2L26,9.2V4a2,2,0,0,0-4,0V9.2L19.4,6.6a1.9,1.9,0,0,0-3,.2,2.1,2.1,0,0,0,.2,2.7Z"/>
                        <path d="M25.4,32.6a1.9,1.9,0,0,0-2.8,0l-6,5.9a2.1,2.1,0,0,0-.2,2.7,1.9,1.9,0,0,0,3,.2L22,38.8V44a2,2,0,0,0,4,0V38.8l2.6,2.6a1.9,1.9,0,0,0,3-.2,2.1,2.1,0,0,0-.2-2.7Z"/>
                        <path d="M6,22H42a2,2,0,0,0,0-4H6a2,2,0,0,0,0,4Z"/>
                        <path d="M42,26H6a2,2,0,0,0,0,4H42a2,2,0,0,0,0-4Z"/>
                    </svg>
                </a>
                <a class="btn btn-outline-dark d-flex align-items-center" role="button" onclick="actionAll(false)">
                    <span class="d-none d-md-block">Expand All</span>
                    <svg class="d-md-none" viewBox="205.7009 131.8402 40.0061 44.0455" width="20" height="20">
                        <path d="M 224.163 175.27 C 224.916 176.091 226.21 176.091 226.963 175.27 L 232.963 169.37 C 233.678 168.639 233.763 167.499 233.163 166.67 C 232.47 165.637 230.987 165.539 230.163 166.47 L 227.563 169.07 L 227.563 163.87 C 227.563 162.33 225.896 161.368 224.563 162.138 C 223.944 162.495 223.563 163.155 223.563 163.87 L 223.563 169.07 L 220.963 166.47 C 220.139 165.539 218.656 165.637 217.963 166.67 C 217.363 167.499 217.448 168.639 218.163 169.37 L 224.163 175.27 Z"/>
                        <path d="M 207.704 151.973 L 243.704 151.973 C 245.244 151.973 246.206 150.306 245.436 148.973 C 245.079 148.354 244.419 147.973 243.704 147.973 L 207.704 147.973 C 206.164 147.973 205.202 149.64 205.972 150.973 C 206.329 151.592 206.989 151.973 207.704 151.973 Z"/>
                        <path d="M 243.704 155.973 L 207.704 155.973 C 206.164 155.973 205.202 157.64 205.972 158.973 C 206.329 159.592 206.989 159.973 207.704 159.973 L 243.704 159.973 C 245.244 159.973 246.206 158.306 245.436 156.973 C 245.079 156.354 244.419 155.973 243.704 155.973 Z"/>
                        <path d="M 227.114 132.456 C 226.361 131.635 225.067 131.635 224.314 132.456 L 218.314 138.356 C 217.599 139.087 217.514 140.227 218.114 141.056 C 218.807 142.089 220.29 142.187 221.114 141.256 L 223.714 138.656 L 223.714 143.856 C 223.714 145.396 225.381 146.358 226.714 145.588 C 227.333 145.231 227.714 144.571 227.714 143.856 L 227.714 138.656 L 230.314 141.256 C 231.138 142.187 232.621 142.089 233.314 141.056 C 233.914 140.227 233.829 139.087 233.114 138.356 L 227.114 132.456 Z"/>
                    </svg>
                </a>
            </div>
            {% if search %}
                <div class="input-group flex-grow-1 justify-content-end">
                    <span class="input-group-text">
                        <svg height="25" width="20" viewBox="0 0 490.4 490.4">
                            <path d="m484.1 454.796-110.5-110.6c29.8-36.3 47.6-82.8 47.6-133.4 0-116.3-94.3-210.6-210.6-210.6S0 94.496 0 210.796s94.3 210.6 210.6 210.6c50.8 0 97.4-18 133.8-48l110.5 110.5c12.9 11.8 25 4.2 29.2 0 8.4-8.3 8.4-20.8 0-29.1m-443-244c0-93.6 75.9-169.5 169.5-169.5s169.6 75.9 169.6 169.5-75.9 169.5-169.5 169.5-169.6-75.9-169.6-169.5"/>
                        </svg>
                    </span>
                    <input id="search" placeholder="Filter by group, rule or labels" type="text" class="form-control"/>
                </div>
            {% endif %}
        </div>
    </div>
{% endfunc %}

{% func Welcome(r *http.Request) %}
    {%= tpl.Header(r, navItems, "vmalert", getLastConfigError()) %}
    <p>
        API:<br>
        {% for _, p := range apiLinks  %}
            {%code p, doc := p[0], p[1] %}
            <a href="{%s p %}">{%s p %}</a> - {%s doc %}<br/>
        {% endfor %}
        {% if r.Header.Get("X-Forwarded-For") == "" %}
            System:<br>
            {% for _, p := range systemLinks  %}
                {%code p, doc := p[0], p[1] %}
                <a href="{%s p %}">{%s p %}</a> - {%s doc %}<br/>
            {% endfor %}
        {% endif %}
    </p>
    {%= tpl.Footer(r) %}
{% endfunc %}

{% func ListGroups(r *http.Request, groups []apiGroup, filter string) %}
    {%code
        prefix := vmalertutil.Prefix(r.URL.Path)
        filters := map[string]string{
            "": "All",
            "unhealthy": "Unhealthy",
            "noMatch": "No Match",
        }
        icons := map[string]string{
            "": `<svg class="d-md-none" height="22" width="22" viewBox="-10 -10 320 310"><path d="M288.953 0h-277c-5.522 0-10 4.478-10 10v49.531c0 5.522 4.478 10 10 10h12.372l91.378 107.397v113.978a10 10 0 0 0 15.547 8.32l49.5-33a10 10 0 0 0 4.453-8.32v-80.978l91.378-107.397h12.372c5.522 0 10-4.478 10-10V10c0-5.522-4.477-10-10-10M167.587 166.77a10 10 0 0 0-2.384 6.48v79.305l-29.5 19.666V173.25a10 10 0 0 0-2.384-6.48L50.585 69.531h199.736zM278.953 49.531h-257V20h257z"/><path stroke-width="20" stroke="#000" d="m-10-10 310 310"/></svg>`,
            "unhealthy": `<svg class="d-md-none" width="22" height="22" viewBox="0 0 14 14"><circle cx="7" cy="7" r="6.5" fill="none"/><path stroke-linecap="round" stroke-width="1.5" d="m5 5 4 4M5 9l4-4"/></svg>`,
            "noMatch": `<svg class="d-md-none" width="22" height="22" viewBox="0 0 116.623 116.623"><path d="M99.114 89.251H57.783l19.181-41.797h22.149a5.971 5.971 0 1 0 0-11.942H82.444L94.591 9.049a5.97 5.97 0 0 0-2.938-7.917 5.97 5.97 0 0 0-7.918 2.936L69.304 35.513H41.662c-2.289-.458-17.685-4.48-17.685-29.542a5.97 5.97 0 1 0-11.942 0c0 18.536 7.157 29.533 14.93 35.514-7.774 5.981-14.93 16.978-14.93 35.514a5.971 5.971 0 1 0 11.942 0c0-25.007 14.886-29.013 17.677-29.542h22.17L44.643 89.253H17.509a5.972 5.972 0 0 0 0 11.943h21.653l-3.196 6.965a5.972 5.972 0 1 0 10.856 4.981l5.479-11.943h46.812a5.975 5.975 0 0 0 .001-11.948"/></svg>`,
        }
        currentText := filters[filter]
    %}
    {%= tpl.Header(r, navItems, "Groups", getLastConfigError()) %}
        {%= Controls(icons, filters, currentText, true) %}
        {%  if len(groups) > 0 %}
            {% for _, g := range groups %}
                <div id="group-{%s g.ID %}" class="d-flex w-100 border-0 flex-column group-items{% if g.Unhealthy > 0 %} alert-danger{% endif %}">
                    <span class="d-flex justify-content-between">
                        <a href="#group-{%s g.ID %}">{%s g.Name %}{% if g.Type != "prometheus" %} ({%s g.Type %}){% endif %} (every {%f.0 g.Interval %}s) #</a>
                        <span
                            class="flex-grow-1 d-flex justify-content-end"
                            role="button"
                            data-bs-toggle="collapse"
                            data-bs-target="#sub-{%s g.ID %}"
                        >
                            <span class="d-flex gap-2">
                                {% if g.Unhealthy > 0 %}<span class="badge bg-danger" title="Number of rules with status Error">{%d g.Unhealthy %}</span> {% endif %}
                                {% if g.NoMatch > 0 %}<span class="badge bg-warning" title="Number of rules with status NoMatch">{%d g.NoMatch %}</span> {% endif %}
                                <span class="badge bg-success" title="Number of rules with status Ok">{%d g.Healthy %}</span>
                            </span>
                        </span>
                    </span>
                    <span
                        class="d-flex flex-column row-gap-2 mb-2"
                        role="button"
                        data-bs-toggle="collapse"
                        data-bs-target="#sub-{%s g.ID %}"
                    >
                        <span class="fs-6 text-start w-100 fw-lighter">{%s g.File %}</span>
                        {% if len(g.Params) > 0 %}
                            <span class="fs-6 text-start w-100 d-flex justify-content-between fw-lighter">
                                <span>Extra params</span>
                                <span class="d-flex align-items-center gap-2">
                                    {% for _, param := range g.Params %}
                                        <span class="badge bg-primary">{%s param %}</span>
                                    {% endfor %}
                                </span>
                            </span>
                        {% endif %}
                        {% if len(g.Headers) > 0 %}
                            <span class="fs-6 text-start w-100 d-flex justify-content-between fw-lighter">
                                <span>Extra headers</span>
                                <span class="d-flex align-items-center gap-2">
                                    {% for _, header := range g.Headers %}
                                        <span class="badge bg-primary label">{%s header %}</span>
                                    {% endfor %}
                                </span>
                            </span>
                        {% endif %}
                    </span>
                    <div class="collapse sub-items" id="sub-{%s g.ID %}">
                        <table class="table table-striped table-hover table-sm">
                            <thead>
                                <tr>
                                    <th scope="col" style="width: 60%">Rule</th>
                                    <th scope="col" style="width: 20%" class="text-center" title="How many samples were produced by the rule">Samples</th>
                                    <th scope="col" style="width: 20%" class="text-center" title="How many seconds ago rule was executed">Updated</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for _, r := range g.Rules %}
                                    <tr class="sub-item{% if r.LastError != "" %} alert-danger{% endif %}">
                                        <td>
                                            <div class="row">
                                                <div class="col-12 mb-2">
                                                    {% if r.Type == "alerting" %}
                                                        {% if r.KeepFiringFor > 0 %}
                                                            <b>alert:</b> {%s r.Name %} (for: {%v r.Duration %} seconds, keep_firing_for: {%v r.KeepFiringFor %} seconds)
                                                        {% else %}
                                                            <b>alert:</b> {%s r.Name %} (for: {%v r.Duration %} seconds)
                                                        {% endif %}
                                                    {% else %}
                                                        <b>record:</b> {%s r.Name %}
                                                    {% endif %}
                                                    |
                                                    {%= seriesFetchedWarn(r) %}
                                                    <span><a target="_blank" href="{%s prefix+r.WebLink() %}">Details</a></span>
                                                </div>
                                                <div class="col-12">
                                                    <code><pre>{%s r.Query %}</pre></code>
                                                </div>
                                                <div class="col-12 mb-2">
                                                    {% if len(r.Labels) > 0 %} <b>Labels:</b>{% endif %}
                                                    {% for k, v := range r.Labels %}
                                                        <span class="ms-1 badge bg-primary label">{%s k %}={%s v %}</span>
                                                    {% endfor %}
                                                </div>
                                                {% if r.LastError != "" %}
                                                    <div class="col-12">
                                                        <b>Error:</b>
                                                        <div class="error-cell">
                                                            {%s r.LastError %}
                                                        </div>
                                                    </div>
                                                {% endif %}
                                            </div>
                                        </td>
                                        <td class="text-center">{%d r.LastSamples %}</td>
                                        <td class="text-center">{%f.3 time.Since(r.LastEvaluation).Seconds() %}s ago</td>
                                    </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                </div>
            {% endfor %}
        {% else %}
            <div>
                <p>No groups...</p>
            </div>
        {% endif %}
    {%= tpl.Footer(r) %}
{% endfunc %}


{% func ListAlerts(r *http.Request, groupAlerts []groupAlerts) %}
    {%code prefix := vmalertutil.Prefix(r.URL.Path) %}
    {%= tpl.Header(r, navItems, "Alerts", getLastConfigError()) %}
    {%= Controls(nil, nil, "", true) %}
    {% if len(groupAlerts) > 0 %}
         {% for _, ga := range groupAlerts %}
             {%code
                 g := ga.Group
                 var keys []string
                 alertsByRule := make(map[string][]*apiAlert)
                 for _, alert := range ga.Alerts {
                     if len(alertsByRule[alert.RuleID]) < 1 {
                         keys = append(keys, alert.RuleID)
                     }
                     alertsByRule[alert.RuleID] = append(alertsByRule[alert.RuleID], alert)
                 }
                 sort.Strings(keys)
             %}
             <div class="d-flex w-100 flex-column group-items alert-danger">
                 <span id="group-{%s g.ID %}" class="d-flex justify-content-between">
                     <a href="#group-{%s g.ID %}">{%s g.Name %}{% if g.Type != "prometheus" %} ({%s g.Type %}){% endif %}</a>
                     <span
                         class="flex-grow-1 d-flex justify-content-end"
                         role="button"
                         data-bs-toggle="collapse"
                         data-bs-target="#sub-{%s g.ID %}"
                     >
                         <span class="badge bg-danger" title="Number of active alerts">{%d len(ga.Alerts) %}</span>
                     </span>
                 </span>
                 <span>
                     <span
                         class="fs-6 text-start w-100 fw-lighter"
                         role="button" 
                         data-bs-toggle="collapse"
                         data-bs-target="#sub-{%s g.ID %}"
                     >{%s g.File %}</span>
                 </span>
                 <div class="collapse sub-items" id="sub-{%s g.ID %}">
                     {% for _, ruleID := range keys %}
                         {%code
                             defaultAR := alertsByRule[ruleID][0]
                             var labelKeys []string
                             for k := range defaultAR.Labels {
                                 labelKeys = append(labelKeys, k)
                             }
                             sort.Strings(labelKeys)
                         %}
                         <br>
                         <div class="sub-item">
                             <b>alert:</b> {%s defaultAR.Name %} ({%d len(alertsByRule[ruleID]) %})
                             | <span><a target="_blank" href="{%s defaultAR.SourceLink %}">Source</a></span>
                             <br>
                             <b>expr:</b><code><pre>{%s defaultAR.Expression %}</pre></code>
                             <table class="table table-striped table-hover table-sm">
                                 <thead>
                                     <tr>
                                         <th scope="col">Labels</th>
                                         <th scope="col">State</th>
                                         <th scope="col">Active at</th>
                                         <th scope="col">Value</th>
                                         <th scope="col">Link</th>
                                     </tr>
                                 </thead>
                                 <tbody>
                                     {% for _, ar := range alertsByRule[ruleID] %}
                                         <tr>
                                             <td>
                                                 {% for _, k := range labelKeys %}
                                                     <span class="ms-1 badge bg-primary label">{%s k %}={%s ar.Labels[k] %}</span>
                                                 {% endfor %}
                                             </td>
                                             <td>{%= badgeState(ar.State) %}</td>
                                             <td>
                                                 {%s ar.ActiveAt.Format("2006-01-02T15:04:05Z07:00") %}
                                                 {% if ar.Restored %}{%= badgeRestored() %}{% endif %}
                                                 {% if ar.Stabilizing %}{%= badgeStabilizing() %}{% endif %}
                                             </td>
                                             <td>{%s ar.Value %}</td>
                                             <td><a href="{%s prefix+ar.WebLink() %}">Details</a></td>
                                         </tr>
                                     {% endfor %}
                                 </tbody>
                             </table>
                         </div>
                     {% endfor %}
                 </div>
             </div>
         {% endfor %}
     {% else %}
         <div>
             <p>No active alerts...</p>
         </div>
     {% endif %}
     {%= tpl.Footer(r) %}
{% endfunc %}

{% func ListTargets(r *http.Request, targets map[notifier.TargetType][]notifier.Target) %}
    {%= tpl.Header(r, navItems, "Notifiers", getLastConfigError()) %}
    {%= Controls(nil, nil, "", false) %}
    {% if len(targets) > 0 %}
        {%code
            var keys []string
            for key := range targets {
                keys = append(keys, string(key))
            }
            sort.Strings(keys)
        %}
        {% for i := range keys %}
            {%code
                typeK, ns := keys[i], targets[notifier.TargetType(keys[i])]
                count := len(ns)
            %}
            <div class="d-flex w-100 flex-column group-items">
                <span class="d-flex justify-content-between" id="group-{%s typeK %}">
                    <a href="#group-{%s typeK %}">{%s typeK %} ({%d count %})</a>
                    <span
                        class="flex-grow-1"
                        role="button"
                        data-bs-toggle="collapse"
                        data-bs-target="#sub-{%s typeK %}"
                    ></span>
                </span>
                <div id="sub-{%s typeK %}" class="collapse show sub-items">
                    <table class="table table-striped table-hover table-sm">
                        <thead>
                            <tr class="sub-item">
                                <th scope="col">Labels</th>
                                <th scope="col">Address</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for _, n := range ns %}
                                <tr>
                                    <td>
                                        {% for _, l := range n.Labels.GetLabels() %}
                                            <span class="ms-1 badge bg-primary">{%s l.Name %}={%s l.Value %}</span>
                                        {% endfor %}
                                    </td>
                                    <td>{%s n.Notifier.Addr() %}</td>
                                </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        {% endfor %}
    {% else %}
        <div>
            <p>No targets...</p>
        </div>
    {% endif %}
    {%= tpl.Footer(r) %}
{% endfunc %}

{% func Alert(r *http.Request, alert *apiAlert) %}
    {%code prefix := vmalertutil.Prefix(r.URL.Path) %}
    {%= tpl.Header(r, navItems, "", getLastConfigError()) %}
    {%code
        var labelKeys []string
        for k := range alert.Labels {
            labelKeys = append(labelKeys, k)
        }
        sort.Strings(labelKeys)
        var annotationKeys []string
        for k := range alert.Annotations {
            annotationKeys = append(annotationKeys, k)
        }
        sort.Strings(annotationKeys)
    %}
    <div class="display-6 pb-3 mb-3">Alert: {%s alert.Name %}<span class="ms-2 badge {% if alert.State=="firing" %}bg-danger{% else %} bg-warning text-dark{% endif %}">{%s alert.State %}</span></div>
    <div class="container border-bottom p-2">
      <div class="row">
        <div class="col-2">
          Active at
        </div>
        <div class="col">
          {%s alert.ActiveAt.Format("2006-01-02T15:04:05Z07:00") %}
        </div>
      </div>
      </div>
    <div class="container border-bottom p-2">
      <div class="row">
        <div class="col-2">
          Expr
        </div>
        <div class="col">
          <code><pre>{%s alert.Expression %}</pre></code>
        </div>
      </div>
    </div>
    <div class="container border-bottom p-2">
      <div class="row">
        <div class="col-2">
          Labels
        </div>
        <div class="col">
           {% for _, k := range labelKeys %}
                <span class="m-1 badge bg-primary">{%s k %}={%s alert.Labels[k] %}</span>
          {% endfor %}
        </div>
      </div>
    </div>
    <div class="container border-bottom p-2">
      <div class="row">
        <div class="col-2">
          Annotations
        </div>
        <div class="col">
           {% for _, k := range annotationKeys %}
                <b>{%s k %}:</b><br>
                <p>{%s alert.Annotations[k] %}</p>
          {% endfor %}
        </div>
      </div>
    </div>
    <div class="container border-bottom p-2">
      <div class="row">
        <div class="col-2">
          Group
        </div>
        <div class="col">
           <a target="_blank" href="{%s prefix %}groups#group-{%s alert.GroupID %}">{%s alert.GroupID %}</a>
        </div>
      </div>
    </div>
     <div class="container border-bottom p-2">
      <div class="row">
        <div class="col-2">
          Source link
        </div>
        <div class="col">
           <a target="_blank" href="{%s alert.SourceLink %}">Link</a>
        </div>
      </div>
    </div>
    {%= tpl.Footer(r) %}

{% endfunc %}


{% func RuleDetails(r *http.Request, rule apiRule) %}
    {%code prefix := vmalertutil.Prefix(r.URL.Path) %}
    {%= tpl.Header(r, navItems, "", getLastConfigError()) %}
    {%code
        var labelKeys []string
        for k := range rule.Labels {
            labelKeys = append(labelKeys, k)
        }
        sort.Strings(labelKeys)

        var annotationKeys []string
        for k := range rule.Annotations {
            annotationKeys = append(annotationKeys, k)
        }
        sort.Strings(annotationKeys)

        var seriesFetchedEnabled bool
        var seriesFetchedWarning bool
        for _, u := range rule.Updates {
          if u.SeriesFetched != nil {
            seriesFetchedEnabled = true
            if *u.SeriesFetched == 0 && u.Samples == 0{
                seriesFetchedWarning = true
            }
          }
        }

    %}
    <div class="display-6 pb-3 mb-3">Rule: {%s rule.Name %}<span class="ms-2 badge {% if rule.Health!="ok" %}bg-danger{% else %} bg-success text-dark{% endif %}">{%s rule.Health %}</span></div>
    <div class="container border-bottom p-2">
      <div class="row">
        <div class="col-2">
          Expr
        </div>
        <div class="col">
          <code><pre>{%s rule.Query %}</pre></code>
        </div>
      </div>
    </div>
    {% if rule.Type == "alerting" %}
    <div class="container border-bottom p-2">
      <div class="row">
        <div class="col-2">
          For
        </div>
        <div class="col">
         {%v rule.Duration %} seconds
        </div>
      </div>
    </div>
    {% if rule.KeepFiringFor > 0 %}
    <div class="container border-bottom p-2">
      <div class="row">
        <div class="col-2">
          Keep firing for
        </div>
        <div class="col">
         {%v rule.KeepFiringFor %} seconds
        </div>
      </div>
    </div>
    {% endif %}
    {% endif %}
    <div class="container border-bottom p-2">
      <div class="row">
        <div class="col-2">
          Labels
        </div>
        <div class="col">
          {% for _, k := range labelKeys %}
                <span class="m-1 badge bg-primary">{%s k %}={%s rule.Labels[k] %}</span>
          {% endfor %}
        </div>
      </div>
    </div>
    {% if rule.Type == "alerting" %}
    <div class="container border-bottom p-2">
      <div class="row">
        <div class="col-2">
          Annotations
        </div>
        <div class="col">
          {% for _, k := range annotationKeys %}
                <b>{%s k %}:</b><br>
                <p>{%s rule.Annotations[k] %}</p>
          {% endfor %}
        </div>
      </div>
    </div>
    <div class="container border-bottom p-2">
      <div class="row">
        <div class="col-2">
          Debug
        </div>
        <div class="col">
           {%v rule.Debug %}
        </div>
      </div>
    </div>
    {% endif %}
    <div class="container border-bottom p-2">
      <div class="row">
        <div class="col-2">
          Group
        </div>
        <div class="col">
           <a target="_blank" href="{%s prefix %}groups#group-{%s rule.GroupID %}">{%s rule.GroupID %}</a>
        </div>
      </div>
    </div>

    <br>
    {% if seriesFetchedWarning %}
    <div class="alert alert-warning" role="alert">
       <strong>Warning:</strong> some of updates have "Series fetched" equal to 0.<br>
       It might be that either this data is missing in the datasource or there is a typo in rule's expression.
       For example, <strong>foo{label="bar"} > 0</strong> could never trigger because <strong>foo{label="bar"}</strong>
       metric doesn't exist.
       <br>
       Rule's expressions without time series selector, like <strong>expr: 42</strong> or <strong>expr: time()</strong>
       aren't fetching time series from datasource, so they could have "Series fetched" equal to 0 and this won't be a problem.
       <br>
       See more details about this detection <a target="_blank" href="https://github.com/VictoriaMetrics/VictoriaMetrics/issues/4039">here</a>.
    </div>
    {% endif %}
    <div class="display-6 pb-3">Last {%d len(rule.Updates) %}/{%d rule.MaxUpdates %} updates</span>:</div>
        <table class="table table-striped table-hover table-sm">
            <thead>
                <tr>
                    <th scope="col" title="The time when event was created">Updated at</th>
                    <th scope="col" style="width: 10%" class="text-center" title="How many samples were returned">Samples</th>
                    {% if seriesFetchedEnabled %}<th scope="col" style="width: 10%" class="text-center" title="How many series were scanned by datasource during the evaluation">Series fetched</th>{% endif %}
                    <th scope="col" style="width: 10%" class="text-center" title="How many seconds request took">Duration</th>
                    <th scope="col" class="text-center" title="Time used for rule execution">Executed at</th>
                    <th scope="col" class="text-center" title="cURL command with request example">cURL</th>
                </tr>
            </thead>
            <tbody>

     {% for _, u := range rule.Updates %}
             <tr{% if u.Err != nil %} class="alert-danger"{% endif %}>
                 <td>
                    <span class="badge bg-primary rounded-pill me-3" title="Updated at">{%s u.Time.Format(time.RFC3339) %}</span>
                 </td>
                 <td class="text-center">{%d u.Samples %}</td>
                 {% if seriesFetchedEnabled %}<td class="text-center">{% if u.SeriesFetched != nil %}{%d *u.SeriesFetched %}{% endif %}</td>{% endif %}
                 <td class="text-center">{%f.3 u.Duration.Seconds() %}s</td>
                 <td class="text-center">{%s u.At.Format(time.RFC3339) %}</td>
                 <td>
                    <textarea class="curl-area" rows="1" onclick="this.focus();this.select()">{%s u.Curl %}</textarea>
                </td>
             </tr>
          </li>
          {% if u.Err != nil %}
             <tr{% if u.Err != nil %} class="alert-danger"{% endif %}>
               <td colspan="{% if seriesFetchedEnabled %}6{%else%}5{%endif%}">
                   <span class="alert-danger">{%v u.Err %}</span>
               </td>
             </tr>
          {% endif %}
     {% endfor %}

    {%= tpl.Footer(r) %}
{% endfunc %}



{% func badgeState(state string) %}
{%code
    badgeClass := "bg-warning text-dark"
    if state == "firing" {
        badgeClass = "bg-danger"
    }
%}
<span class="badge {%s badgeClass %}">{%s state %}</span>
{% endfunc %}

{% func badgeRestored() %}
<span class="badge bg-warning text-dark" title="Alert state was restored after the service restart from remote storage">restored</span>
{% endfunc %}

{% func badgeStabilizing() %}
<span class="badge bg-warning text-dark" title="This firing state is kept because of `keep_firing_for`">stabilizing</span>
{% endfunc %}

{% func seriesFetchedWarn(r apiRule) %}
{% if isNoMatch(r) %}
<svg xmlns="http://www.w3.org/2000/svg"
    data-bs-toggle="tooltip"
    title="No match! This rule's last evaluation hasn't selected any time series from the datasource.
    It might be that either this data is missing in the datasource or there is a typo in rule's expression.
    See more in Details."
    width="18" height="18" fill="currentColor" class="bi bi-exclamation-triangle-fill flex-shrink-0 me-2" viewBox="0 0 16 16" role="img" aria-label="Warning:">
       <path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
</svg>
{% endif %}
{% endfunc %}

{%code
  func isNoMatch (r apiRule) bool {
    return r.LastSamples == 0 && r.LastSeriesFetched != nil && *r.LastSeriesFetched == 0
  }
%}
