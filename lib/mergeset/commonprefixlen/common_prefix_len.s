// +build !noasm !appengine
// Code generated by asm2asm, DO NOT EDIT.

#include "go_asm.h"
#include "funcdata.h"
#include "textflag.h"

TEXT 路__native_entry__(SB), NOSPLIT, $0
	NO_LOCAL_POINTERS
	LONG $0xf9058d48; WORD $0xffff; BYTE $0xff  // leaq         $-7(%rip), %rax
	MOVQ AX, 8(SP)
	RET
_common_prefix_len:
	BYTE $0x55  // pushq        %rbp
	WORD $0x8948; BYTE $0xe5  // movq         %rsp, %rbp
	WORD $0x5741  // pushq        %r15
	WORD $0x5641  // pushq        %r14
	BYTE $0x53  // pushq        %rbx
	CMPL SI, CX
	JGE LBB1_7
	MOVL SI, R9
	MOVQ DI, R8
	CMPL CX, $15
	JLE LBB1_8
LBB1_2:
	MOVL DX, SI
	ANDL $15, SI
	JE LBB1_12
	MOVL DX, DI
	ANDL $15, DI
	XORL AX, AX
LBB1_4:
	MOVBLZX 0(DX)(AX*1), BX
	CMPB BX, 0(R8)(AX*1)
	JNE LBB1_21
	ADDQ $1, AX
	CMPL DI, AX
	JNE LBB1_4
	MOVL SI, AX
	JMP LBB1_22
LBB1_7:
	MOVL CX, R9
	MOVQ DX, R8
	MOVL SI, CX
	MOVQ DI, DX
	CMPL CX, $15
	JG LBB1_2
LBB1_8:
	CMPL CX, R9
	MOVL CX, AX
	LONG $0xc14c0f41  // cmovll       %r9d, %eax
	TESTL AX, AX
	JLE LBB1_20
	CMPL CX, R9
	MOVQ DX, SI
	LONG $0xf04c0f49  // cmovlq       %r8, %rsi
	LONG $0xc24c0f4c  // cmovlq       %rdx, %r8
	XORL DX, DX
LBB1_10:
	MOVBLZX 0(SI)(DX*1), BX
	CMPB BX, 0(R8)(DX*1)
	JNE LBB1_31
	ADDQ $1, DX
	CMPL CX, DX
	JNE LBB1_10
	JMP LBB1_57
LBB1_12:
	MOVL CX, R14
	SHRL $4, R14
	XORL AX, AX
	CMPL CX, R9
	JGE LBB1_24
LBB1_13:
	LONG $0x026ff9c5  // vmovdqa      (%rdx), %xmm0
	LONG $0x6f7ac1c4; BYTE $0x08  // vmovdqu      (%r8), %xmm1
	LONG $0xd174f9c5  // vpcmpeqb     %xmm1, %xmm0, %xmm2
	LONG $0xcad7f9c5  // vpmovmskb    %xmm2, %ecx
	TESTL CX, CX
	JE LBB1_33
	XORL CX, CX
	MOVB $1, R10
	LEAL 0(CX)(R9*1), DI
	TESTL DI, DI
	JLE LBB1_57
LBB1_15:
	LONG $0xc074f1c5  // vpcmpeqb     %xmm0, %xmm1, %xmm0
	LONG $0xc67ef9c5  // vmovd        %xmm0, %esi
	XORL R15, R15
	MOVB $1, R11
	TESTB $1, SI
	JE LBB1_41
	ADDL R9, CX
	ADDL $-1, CX
	XORL SI, SI
LBB1_17:
	CMPL CX, SI
	JE LBB1_45
	MOVBLZX 1(R8)(SI*1), BX
	LEAQ 1(SI), R15
	CMPB BX, 1(DX)(SI*1)
	MOVQ R15, SI
	JE LBB1_17
LBB1_41:
	MOVL R9, CX
	JMP LBB1_47
LBB1_20:
	XORL AX, AX
	JMP LBB1_57
LBB1_21:
	CMPL AX, SI
	JB LBB1_57
LBB1_22:
	MOVL SI, DI
	ADDQ DI, DX
	ADDQ DI, R8
	MOVL CX, DI
	SUBL SI, DI
	MOVL R9, BX
	SUBL SI, BX
	LEAL 15(DI), R14
	TESTL DI, DI
	LONG $0xf7490f44  // cmovnsl      %edi, %r14d
	SARL $4, R14
	CMPL CX, R9
	SETLT R11
	MOVL DI, SI
	WORD $0x4c0f; BYTE $0xf3  // cmovll       %ebx, %esi
	CMPL DI, $16
	JL LBB1_32
	CMPL CX, R9
	MOVL DI, CX
	MOVL BX, R9
	JL LBB1_13
LBB1_24:
	LONG $0x026ff9c5  // vmovdqa      (%rdx), %xmm0
	LONG $0x6f7ac1c4; BYTE $0x08  // vmovdqu      (%r8), %xmm1
	LONG $0xd174f9c5  // vpcmpeqb     %xmm1, %xmm0, %xmm2
	LONG $0xf2d7f9c5  // vpmovmskb    %xmm2, %esi
	TESTL SI, SI
	JE LBB1_37
	XORL R9, R9
	MOVB $1, R10
	LEAL 0(R9)(CX*1), R15
	TESTL R15, R15
	JLE LBB1_57
LBB1_26:
	LONG $0xc174f9c5  // vpcmpeqb     %xmm1, %xmm0, %xmm0
	LONG $0xc67ef9c5  // vmovd        %xmm0, %esi
	XORL R11, R11
	TESTB $1, SI
	JE LBB1_42
	LEAL 0(CX)(R9*1), SI
	ADDL $-1, SI
	XORL BX, BX
LBB1_28:
	CMPL SI, BX
	JE LBB1_46
	MOVBLZX 1(DX)(BX*1), R9
	LEAQ 1(BX), DI
	CMPB R9, 1(R8)(BX*1)
	MOVQ DI, BX
	JE LBB1_28
	XORL R11, R11
	MOVL DI, R15
	JMP LBB1_47
LBB1_31:
	MOVL DX, AX
	JMP LBB1_57
LBB1_32:
	MOVL SI, R9
	JMP LBB1_50
LBB1_33:
	MOVL $1, SI
	SUBL R14, SI
	XORL CX, CX
	XORL DI, DI
LBB1_34:
	CMPL SI, CX
	JE LBB1_43
	LONG $0x446ff9c5; WORD $0x103a  // vmovdqa      $16(%rdx,%rdi), %xmm0
	LONG $0x6f7ac1c4; WORD $0x384c; BYTE $0x10  // vmovdqu      $16(%r8,%rdi), %xmm1
	LONG $0xd174f9c5  // vpcmpeqb     %xmm1, %xmm0, %xmm2
	LONG $0xdad7f9c5  // vpmovmskb    %xmm2, %ebx
	ADDQ $16, DI
	ADDL $-1, CX
	TESTL BX, BX
	JE LBB1_34
	NEGL CX
	CMPL CX, R14
	SETLT R10
	ADDL DI, AX
	MOVL DI, CX
	NEGL CX
	ADDQ DI, R8
	ADDQ DI, DX
	LEAL 0(CX)(R9*1), DI
	TESTL DI, DI
	JG LBB1_15
	JMP LBB1_57
LBB1_37:
	MOVL $1, R9
	SUBL R14, R9
	XORL BX, BX
	XORL DI, DI
LBB1_38:
	CMPL R9, BX
	JE LBB1_44
	LONG $0x446ff9c5; WORD $0x103a  // vmovdqa      $16(%rdx,%rdi), %xmm0
	LONG $0x6f7ac1c4; WORD $0x384c; BYTE $0x10  // vmovdqu      $16(%r8,%rdi), %xmm1
	LONG $0xd174f9c5  // vpcmpeqb     %xmm1, %xmm0, %xmm2
	LONG $0xf2d7f9c5  // vpmovmskb    %xmm2, %esi
	ADDQ $16, DI
	ADDL $-1, BX
	TESTL SI, SI
	JE LBB1_38
	NEGL BX
	CMPL BX, R14
	SETLT R10
	ADDL DI, AX
	MOVL DI, R9
	NEGL R9
	ADDQ DI, R8
	ADDQ DI, DX
	LEAL 0(R9)(CX*1), R15
	TESTL R15, R15
	JG LBB1_26
	JMP LBB1_57
LBB1_42:
	XORL R15, R15
	JMP LBB1_47
LBB1_43:
	ADDL DI, AX
	ADDL $16, AX
	ADDQ DI, R8
	ADDQ $16, R8
	ADDQ DI, DX
	ADDQ $16, DX
	MOVB $1, R11
	JMP LBB1_50
LBB1_44:
	ADDL DI, AX
	ADDL $16, AX
	ADDQ DI, R8
	ADDQ $16, R8
	ADDQ DI, DX
	ADDQ $16, DX
	XORL R11, R11
	JMP LBB1_49
LBB1_45:
	MOVL R9, CX
	MOVL DI, R15
	JMP LBB1_47
LBB1_46:
	XORL R11, R11
LBB1_47:
	TESTB R10, R10
	JE LBB1_49
	ADDL AX, R15
	MOVL R15, AX
	JMP LBB1_57
LBB1_49:
	MOVL CX, R9
LBB1_50:
	SHLL $4, R14
	SUBL R14, R9
	TESTL R9, R9
	JLE LBB1_54
	TESTB R11, R11
	MOVQ DX, CX
	LONG $0xc8450f49  // cmovneq      %r8, %rcx
	LONG $0xc2450f4c  // cmovneq      %rdx, %r8
	MOVL R9, SI
	XORL DX, DX
LBB1_52:
	MOVBLZX 0(CX)(DX*1), BX
	CMPB BX, 0(R8)(DX*1)
	JNE LBB1_55
	ADDQ $1, DX
	CMPL SI, DX
	JNE LBB1_52
	JMP LBB1_56
LBB1_54:
	XORL R9, R9
	JMP LBB1_56
LBB1_55:
	MOVL DX, R9
LBB1_56:
	ADDL AX, R9
	MOVL R9, AX
LBB1_57:
	BYTE $0x5b  // popq         %rbx
	WORD $0x5e41  // popq         %r14
	WORD $0x5f41  // popq         %r15
	BYTE $0x5d  // popq         %rbp
	RET

TEXT 路__common_prefix_len(SB), NOSPLIT | NOFRAME, $0 - 40
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -32(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_common_prefix_len:
	MOVQ a+0(FP), DI
	MOVQ lenA+8(FP), SI
	MOVQ b+16(FP), DX
	MOVQ lenB+24(FP), CX
	CALL 路__native_entry__+13(SB)  // _common_prefix_len
	MOVQ AX, ret+32(FP)
	RET

_stack_grow:
	CALL runtime路morestack_noctxt<>(SB)
	JMP  _entry
