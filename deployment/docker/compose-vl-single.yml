services:
  # Grafana instance configured with VictoriaLogs as datasource
  grafana:
    image: grafana/grafana:11.5.0
    depends_on:
      - "victoriametrics"
      - "victorialogs"
    ports:
      - 3000:3000
    volumes:
      - grafanadata:/var/lib/grafana
      - ./provisioning/datasources/victoriametrics-logs-datasource/single.yml:/etc/grafana/provisioning/datasources/single.yml
      - ./provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./provisioning/plugins/:/var/lib/grafana/plugins
      - ./../../dashboards/victoriametrics.json:/var/lib/grafana/dashboards/vm.json
      - ./../../dashboards/victorialogs.json:/var/lib/grafana/dashboards/vl.json
    environment:
      - "GF_INSTALL_PLUGINS=victoriametrics-logs-datasource"
    restart: always

  # vector is logs collector. It collects logs according to vector.yml
  # and forwards them to VictoriaLogs
  vector:
    image: docker.io/timberio/vector:0.46.X-distroless-libc
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
      - type: bind
        source: /var/lib/docker
        target: /var/lib/docker
      - ./vector-vl-single.yml:/etc/vector/vector.yaml:ro
    depends_on: [victorialogs]
    ports:
      - "8686:8686"
    user: root

  #  VictoriaLogs instance, a single process responsible for
  #  storing logs and serving read queries.
  victorialogs:
    image: victoriametrics/victoria-logs:v1.21.0-victorialogs
    command:
      - "--storageDataPath=/vlogs"
    volumes:
      - vldata:/vlogs

  # VictoriaMetrics instance, a single process responsible for
  # scraping, storing metrics and serve read requests.
  victoriametrics:
    image: victoriametrics/victoria-metrics:v1.116.0
    volumes:
      - vmdata:/storage
      - ./prometheus-vl-single.yml:/etc/prometheus/prometheus.yml
    command:
      - "--storageDataPath=/storage"
      - "--promscrape.config=/etc/prometheus/prometheus.yml"
    restart: always

  # vmauth is a router and balancer for HTTP requests.
  # It proxies query requests from vmalert to either VictoriaMetrics or VictoriaLogs,
  # depending on the requested path.
  vmauth:
    image: victoriametrics/vmauth:v1.116.0
    depends_on:
      - "victoriametrics"
      - "victorialogs"
    volumes:
      - ./auth-vl-single.yml:/etc/auth.yml
    command:
      - "--auth.config=/etc/auth.yml"
    ports:
      - 8427:8427
    restart: always

  # vmalert executes alerting and recording rules according to the given rule type.
  vmalert:
    image: victoriametrics/vmalert:v1.116.0
    depends_on:
      - "vmauth"
      - "alertmanager"
      - "victoriametrics"
    ports:
      - 8880:8880
    volumes:
      - ./rules/alerts.yml:/etc/alerts/alerts.yml
      - ./rules/alerts-vlogs.yml:/etc/alerts/vlogs.yml
      - ./rules/alerts-health.yml:/etc/alerts/alerts-health.yml
      - ./rules/alerts-vmalert.yml:/etc/alerts/alerts-vmalert.yml
      # vlogs rule
      - ./rules/vlogs-example-alerts.yml:/etc/alerts/vlogs-example-alerts.yml
    command:
      - "--datasource.url=http://vmauth:8427/"
      - "--remoteRead.url=http://victoriametrics:8428/"
      - "--remoteWrite.url=http://victoriametrics:8428/"
      - "--notifier.url=http://alertmanager:9093/"
      - "--rule=/etc/alerts/*.yml"
      # display source of alerts in grafana
      - "--external.url=http://127.0.0.1:3000" #grafana outside container
    restart: always

  # alertmanager receives alerting notifications from vmalert
  # and distributes them according to --config.file.
  alertmanager:
    image: prom/alertmanager:v0.28.0
    volumes:
      - ./alertmanager.yml:/config/alertmanager.yml
    command:
      - "--config.file=/config/alertmanager.yml"
    ports:
      - 9093:9093
    restart: always

volumes:
  vmdata: {}
  vldata: {}
  grafanadata: {}
